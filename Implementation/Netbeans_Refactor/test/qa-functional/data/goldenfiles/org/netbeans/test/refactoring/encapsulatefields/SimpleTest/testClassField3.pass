Encapsulate field protected protectedProperty of class org.netbeans.tests.examples.packb.BeanA
field changed to protected, setter: public setProtectedProperty(...), getter: public getProtectedProperty(), use accessors always
Found 16 occurance(s).

org/netbeans/tests/examples/packb/BeanA.java

      privateProperty=publicProperty+<b>protectedProperty</b>;

File diff:

-pass[81]             privateProperty=publicProperty+protectedProperty;
+test[81]             privateProperty=publicProperty+getProtectedProperty();
Original file:
-------------------------------------
/*
 * BeanA.java
 *
 * Created on May 20, 2004, 2:12 PM
 */

package org.netbeans.tests.examples.packb;

import org.netbeans.tests.examples.packa.Bean;

/**
 *
 * @author  eh103527
 */
public class BeanA extends Bean implements org.netbeans.tests.examples.packa.Testable {
    
    String privateProperty;
    
    protected String protectedProperty;
    
    public String publicProperty;
    
    /** Creates a new instance of BeanA */
    public BeanA() {
        refID=2345;
        System.out.println("Construct");
    }
    
    /**
     * Getter for property privateProperty.
     * @return Value of property privateProperty.
     */
    public java.lang.String getPrivateProperty() {
        return privateProperty;
    }
    
    public int getRefID() {
        return refID+10;
    }
    /**
     * Setter for property privateProperty.
     * @param privateProperty New value of property privateProperty.
     */
    public void setPrivateProperty(java.lang.String privateProperty) {
        this.privateProperty = privateProperty;
    }
    
    /**
     * Getter for property protectedProperty.
     * @return Value of property protectedProperty.
     */
    public java.lang.String getProtectedProperty() {
        return protectedProperty;
    }
    
    /**
     * Setter for property protectedProperty.
     * @param protectedProperty New value of property protectedProperty.
     */
    public void setProtectedProperty(java.lang.String protectedProperty) {
        this.protectedProperty = protectedProperty;
    }
    
    /**
     * Getter for property publicProperty.
     * @return Value of property publicProperty.
     */
    public java.lang.String getPublicProperty() {
        return publicProperty;
    }
    
    /**
     * Setter for property publicProperty.
     * @param publicProperty New value of property publicProperty.
     */
    public void setPublicProperty(java.lang.String publicProperty) {
        this.publicProperty = publicProperty;
    }
    
    public org.netbeans.tests.examples.packa.Testable test() {
        privateProperty=publicProperty+protectedProperty;
        return this;
    }
    
    public org.netbeans.tests.examples.packa.Testable[] usages(java.util.List list) {
        return null;
    }
    
    public void prepare(Object[] data) {
        
    }
}
Modified file:
-------------------------------------
/*
 * BeanA.java
 *
 * Created on May 20, 2004, 2:12 PM
 */

package org.netbeans.tests.examples.packb;

import org.netbeans.tests.examples.packa.Bean;

/**
 *
 * @author  eh103527
 */
public class BeanA extends Bean implements org.netbeans.tests.examples.packa.Testable {
    
    String privateProperty;
    
    protected String protectedProperty;
    
    public String publicProperty;
    
    /** Creates a new instance of BeanA */
    public BeanA() {
        refID=2345;
        System.out.println("Construct");
    }
    
    /**
     * Getter for property privateProperty.
     * @return Value of property privateProperty.
     */
    public java.lang.String getPrivateProperty() {
        return privateProperty;
    }
    
    public int getRefID() {
        return refID+10;
    }
    /**
     * Setter for property privateProperty.
     * @param privateProperty New value of property privateProperty.
     */
    public void setPrivateProperty(java.lang.String privateProperty) {
        this.privateProperty = privateProperty;
    }
    
    /**
     * Getter for property protectedProperty.
     * @return Value of property protectedProperty.
     */
    public java.lang.String getProtectedProperty() {
        return protectedProperty;
    }
    
    /**
     * Setter for property protectedProperty.
     * @param protectedProperty New value of property protectedProperty.
     */
    public void setProtectedProperty(java.lang.String protectedProperty) {
        this.protectedProperty = protectedProperty;
    }
    
    /**
     * Getter for property publicProperty.
     * @return Value of property publicProperty.
     */
    public java.lang.String getPublicProperty() {
        return publicProperty;
    }
    
    /**
     * Setter for property publicProperty.
     * @param publicProperty New value of property publicProperty.
     */
    public void setPublicProperty(java.lang.String publicProperty) {
        this.publicProperty = publicProperty;
    }
    
    public org.netbeans.tests.examples.packa.Testable test() {
        privateProperty=publicProperty+getProtectedProperty();
        return this;
    }
    
    public org.netbeans.tests.examples.packa.Testable[] usages(java.util.List list) {
        return null;
    }
    
    public void prepare(Object[] data) {
        
    }
}

org/netbeans/tests/examples/packb/BeanB.java

      <b>ba.protectedProperty</b>+=5;

File diff:

-pass[34]             ba.protectedProperty+=5;
+test[34]             ba.setProtectedProperty(ba.getProtectedProperty() + 5);
Original file:
-------------------------------------
/*
 * BeanB.java
 *
 * Created on May 20, 2004, 2:14 PM
 */

package org.netbeans.tests.examples.packb;

import java.util.Vector;
import org.netbeans.tests.examples.packa.Bean;
import org.netbeans.tests.examples.packa.Testable;

import org.netbeans.tests.examples.packc.Makable;

/**
 *
 * @author  eh103527
 */
public class BeanB extends Bean implements org.netbeans.tests.examples.packc.Makable {
    
    int index=0;
    
    Vector beansa=new Vector();
    
    /** Creates a new instance of BeanB */
    public BeanB() {
        refID=473542*Makable.CODE;
    }
    
    public void addBeanA(BeanA ba) {
        beansa.add(ba);
        ((Testable)new BeansD.BeanDA("1")).test();
        new BeansD.BeanDA("1").test();
        ba.protectedProperty+=5;
    }
    
    public BeanA getBeanA(int indx) {
        return (BeanA)(beansa.get(indx));
    }
    
    public Bean[] getBeans() {
        return (Bean[])(beansa.toArray(new Bean[beansa.size()]));
    }
    
    /**
     * Getter for property index.
     * @return Value of property index.
     */
    public int getIndex() {
        return index;
    }
    
    /**
     * Setter for property index.
     * @param index New value of property index.
     */
    public void setIndex(int index) {
        this.index = index;
    }
    
    public Object[] finish() {
        return new Object[CODE];
    }
    
    public Makable prepare() {
        System.out.println("do");
        BeanC c=new BeanC();
        c.prepare().make(10, "run", this);
        ((Bean)c).abc();
        return this;
    }
    
    public void make(int index, java.lang.String s, org.netbeans.tests.examples.packa.Bean bean) {
    }
    
}
Modified file:
-------------------------------------
/*
 * BeanB.java
 *
 * Created on May 20, 2004, 2:14 PM
 */

package org.netbeans.tests.examples.packb;

import java.util.Vector;
import org.netbeans.tests.examples.packa.Bean;
import org.netbeans.tests.examples.packa.Testable;

import org.netbeans.tests.examples.packc.Makable;

/**
 *
 * @author  eh103527
 */
public class BeanB extends Bean implements org.netbeans.tests.examples.packc.Makable {
    
    int index=0;
    
    Vector beansa=new Vector();
    
    /** Creates a new instance of BeanB */
    public BeanB() {
        refID=473542*Makable.CODE;
    }
    
    public void addBeanA(BeanA ba) {
        beansa.add(ba);
        ((Testable)new BeansD.BeanDA("1")).test();
        new BeansD.BeanDA("1").test();
        ba.setProtectedProperty(ba.getProtectedProperty() + 5);
    }
    
    public BeanA getBeanA(int indx) {
        return (BeanA)(beansa.get(indx));
    }
    
    public Bean[] getBeans() {
        return (Bean[])(beansa.toArray(new Bean[beansa.size()]));
    }
    
    /**
     * Getter for property index.
     * @return Value of property index.
     */
    public int getIndex() {
        return index;
    }
    
    /**
     * Setter for property index.
     * @param index New value of property index.
     */
    public void setIndex(int index) {
        this.index = index;
    }
    
    public Object[] finish() {
        return new Object[CODE];
    }
    
    public Makable prepare() {
        System.out.println("do");
        BeanC c=new BeanC();
        c.prepare().make(10, "run", this);
        ((Bean)c).abc();
        return this;
    }
    
    public void make(int index, java.lang.String s, org.netbeans.tests.examples.packa.Bean bean) {
    }
    
}

org/netbeans/tests/examples/packb/BeanC.java

      <b>protectedProperty</b>+=s+publicProperty;
      <b>protectedProperty</b>="set";
      <b>protectedProperty</b>="set";
      System.out.println("done "+refID+" "+<b>BeanC.this.protectedProperty</b>);
      System.out.println("getBean, property="+<b>protectedProperty</b>);
      return new Object[] {<b>protectedProperty</b>, publicProperty};

File diff:

-pass[30]                     System.out.println("done "+refID+" "+BeanC.this.protectedProperty);
+test[30]                     System.out.println("done "+refID+" "+BeanC.this.getProtectedProperty());
-pass[48]             System.out.println("getBean, property="+protectedProperty);
+test[48]             System.out.println("getBean, property="+getProtectedProperty());
-pass[54]             protectedProperty="set";
+test[54]             setProtectedProperty("set");
-pass[69]             protectedProperty="set";
+test[69]             setProtectedProperty("set");
-pass[92]             return new Object[] {protectedProperty, publicProperty};
+test[92]             return new Object[] {getProtectedProperty(), publicProperty};
-pass[96]             protectedProperty+=s+publicProperty;
+test[96]             setProtectedProperty(getProtectedProperty() + (s+publicProperty));
Original file:
-------------------------------------
/*
 * BeanC.java
 *
 * Created on May 20, 2004, 2:17 PM
 */

package org.netbeans.tests.examples.packb;
import org.netbeans.tests.examples.packc.Makable;


/**
 *
 * @author  eh103527
 */
public class BeanC extends BeanA implements Makable {
    
    boolean sign=false;
    
    org.netbeans.tests.examples.packa.Bean b;
    
    /** Creates a new instance of BeanC */
    public BeanC() {
        super();
        init();
    }
    
    public void init() {
        b=new BeanB() {
            public void doit() {
                System.out.println("done "+refID+" "+BeanC.this.protectedProperty);
            }
        };
        ((BeanB)b).abc();
    }
    
    public int getRefID() {
        return refID+100;
    }
    /**
     * Getter for property sign.
     * @return Value of property sign.
     */
    public boolean isSign() {
        return sign;
    }
    
    public org.netbeans.tests.examples.packa.Bean getBean() {
        System.out.println("getBean, property="+protectedProperty);
        return b;
    }
    
    public void setBean(org.netbeans.tests.examples.packa.Bean bean) {
        b=bean;
        protectedProperty="set";
    }
    /**
     * Setter for property sign.
     * @param sign New value of property sign.
     */
    public void setSign(boolean sign) {
        this.sign = sign;
        int d=BeanB.CODE;
        int count=(int)((refID+5)*d+(refID*refID*1.0/Math.tan((double)refID)));
        org.netbeans.tests.examples.packa.Bean bb=new BeanC();
        ((org.netbeans.tests.examples.packc.Makable)bb).prepare().make(refID, "text", this);
        ((BeanB)(((BeanC)bb).getBean())).make(refID+1, ((BeanA)bb).getProtectedProperty(), b);
        int id=bb.getRefID();
        BeanC[] cc=(BeanC[])(((org.netbeans.tests.examples.packc.Makable)bb).finish());
        protectedProperty="set";
        publicProperty="a";
        BeansD.BeanDA da=new BeansD.BeanDA("text");
        new BeanB().abc();
    }
    
    public org.netbeans.tests.examples.packa.Testable test() {
        return super.test();
    }
    
    public java.lang.String getProtectedProperty() {
        java.lang.String retValue;
        
        retValue = super.getProtectedProperty();
        return retValue;
    }
    
    public void setTestable(org.netbeans.tests.examples.packa.Testable t) {
        org.netbeans.tests.examples.packa.Testable te=t;
        te.test();
    }

    public java.lang.Object[] finish() {
        return new Object[] {protectedProperty, publicProperty};
    }

    public void make(int index, java.lang.String s, org.netbeans.tests.examples.packa.Bean bean) {
        protectedProperty+=s+publicProperty;
    }

    public org.netbeans.tests.examples.packc.Makable prepare() {
        return null;
    }
}
Modified file:
-------------------------------------
/*
 * BeanC.java
 *
 * Created on May 20, 2004, 2:17 PM
 */

package org.netbeans.tests.examples.packb;
import org.netbeans.tests.examples.packc.Makable;


/**
 *
 * @author  eh103527
 */
public class BeanC extends BeanA implements Makable {
    
    boolean sign=false;
    
    org.netbeans.tests.examples.packa.Bean b;
    
    /** Creates a new instance of BeanC */
    public BeanC() {
        super();
        init();
    }
    
    public void init() {
        b=new BeanB() {
            public void doit() {
                System.out.println("done "+refID+" "+BeanC.this.getProtectedProperty());
            }
        };
        ((BeanB)b).abc();
    }
    
    public int getRefID() {
        return refID+100;
    }
    /**
     * Getter for property sign.
     * @return Value of property sign.
     */
    public boolean isSign() {
        return sign;
    }
    
    public org.netbeans.tests.examples.packa.Bean getBean() {
        System.out.println("getBean, property="+getProtectedProperty());
        return b;
    }
    
    public void setBean(org.netbeans.tests.examples.packa.Bean bean) {
        b=bean;
        setProtectedProperty("set");
    }
    /**
     * Setter for property sign.
     * @param sign New value of property sign.
     */
    public void setSign(boolean sign) {
        this.sign = sign;
        int d=BeanB.CODE;
        int count=(int)((refID+5)*d+(refID*refID*1.0/Math.tan((double)refID)));
        org.netbeans.tests.examples.packa.Bean bb=new BeanC();
        ((org.netbeans.tests.examples.packc.Makable)bb).prepare().make(refID, "text", this);
        ((BeanB)(((BeanC)bb).getBean())).make(refID+1, ((BeanA)bb).getProtectedProperty(), b);
        int id=bb.getRefID();
        BeanC[] cc=(BeanC[])(((org.netbeans.tests.examples.packc.Makable)bb).finish());
        setProtectedProperty("set");
        publicProperty="a";
        BeansD.BeanDA da=new BeansD.BeanDA("text");
        new BeanB().abc();
    }
    
    public org.netbeans.tests.examples.packa.Testable test() {
        return super.test();
    }
    
    public java.lang.String getProtectedProperty() {
        java.lang.String retValue;
        
        retValue = super.getProtectedProperty();
        return retValue;
    }
    
    public void setTestable(org.netbeans.tests.examples.packa.Testable t) {
        org.netbeans.tests.examples.packa.Testable te=t;
        te.test();
    }

    public java.lang.Object[] finish() {
        return new Object[] {getProtectedProperty(), publicProperty};
    }

    public void make(int index, java.lang.String s, org.netbeans.tests.examples.packa.Bean bean) {
        setProtectedProperty(getProtectedProperty() + (s+publicProperty));
    }

    public org.netbeans.tests.examples.packc.Makable prepare() {
        return null;
    }
}

org/netbeans/tests/examples/packb/BeansD.java

      <b>protectedProperty</b>,
      <b>protectedProperty</b>="abc";
      <b>protectedProperty</b>=copy.protectedProperty+copy.protectedProperty;
      System.out.println("testinner "+<b>protectedProperty</b>+publicProperty);
      protectedProperty=<b>copy.protectedProperty</b>+copy.protectedProperty;
      protectedProperty=copy.protectedProperty+<b>copy.protectedProperty</b>;
      publicProperty=<b>protectedProperty</b>;
      return (<b>protectedProperty</b>+retValue).substring(1);

File diff:

-pass[45]                 protectedProperty=copy.protectedProperty+copy.protectedProperty;
+test[45]                 setProtectedProperty(copy.getProtectedProperty() + copy.getProtectedProperty());
-pass[46]                 publicProperty=protectedProperty;
+test[46]                 publicProperty=getProtectedProperty();
-pass[78]                 System.out.println("testinner "+protectedProperty+publicProperty);
+test[78]                 System.out.println("testinner "+getProtectedProperty()+publicProperty);
-pass[83]                 protectedProperty="abc";
+test[83]                 setProtectedProperty("abc");
-pass[142]                protectedProperty,
+test[142]    getProtectedProperty(),             "qqqqq",
-pass[143]                "qqqqq",
+test[151]            return (getProtectedProperty()+retValue).substring(1);
-pass[152]            return (protectedProperty+retValue).substring(1);
Original file:
-------------------------------------
/*
 * BeansD.java
 *
 * Created on May 20, 2004, 2:19 PM
 */

package org.netbeans.tests.examples.packb;

import org.netbeans.tests.examples.packa.Bean;
import org.netbeans.tests.examples.packa.Testable;
import org.netbeans.tests.examples.packc.Makable;

/**
 *
 * @author  eh103527
 */
public class BeansD implements org.netbeans.tests.examples.packc.Makable {
    
    static {
        new BeansD(new BeanD());
    }
    
    BeanA bb;
    
    Bean[] beans;
    
    /** Creates a new instance of BeansD */
    public BeansD() {
        bb=new BeanDA("text");
    }
    
    public BeansD(BeanA bb) {
        this.bb=bb;
        
    }
    
    public static class BeanDA extends BeanA {
        int number=CODE;
        
        public BeanDA(java.lang.String text) {
            super();
            this.abc().abc().abc();
            BeanA copy=new BeanA();
            setProtectedProperty(copy.getProtectedProperty()+copy.getProtectedProperty()+copy.getProtectedProperty());
            protectedProperty=copy.protectedProperty+copy.protectedProperty;
            publicProperty=protectedProperty;
        }
        
        /**
         * Getter for property number.
         * @return Value of property number.
         */
        public int getNumber() {
            return number;
        }
        
        /**
         * Setter for property number.
         * @param number New value of property number.
         */
        public void setNumber(int number) {
            this.number = number*BeanB.CODE;
            System.out.println(getProtectedProperty());
        }
        
        public Bean abc() {
            return this;
        }
    }
    
    public class BeanDC extends BeanC {
        
        public String getProtectedProperty() {
            return super.getProtectedProperty()+"aaa";
        }
        
        public void make(int index, java.lang.String s, Bean bean) {
            System.out.println("testinner "+protectedProperty+publicProperty);
        }
        
        public Bean abc() {
            System.out.println("abc");
            protectedProperty="abc";
            publicProperty="def";
            return super.abc();
        }
    }
    
    protected Bean[] getBeans() {
        return beans;
    }
    
    public void setBeans(Bean[] bss) {
        beans=bss;
    }
    
    public Object[] finish() {
        System.out.println("text "+bb.getProtectedProperty()+" "+((Bean)bb).abc());
        
        return null;
    }
    
    public void prepare(Object[] data) {
        ((Testable)bb).test();
        ((BeanD)bb).getProtectedProperty();
    }
    
    public org.netbeans.tests.examples.packc.Makable prepare() {
        ((Makable)new BeanDD("ttt")).make(10, "", bb);
        System.out.println("message");
        System.out.println();
        return new BeanDD("ttt");
    }
    
    public void make(int index, java.lang.String s, Bean bean) {
        System.out.println("test1");
    }
    
}


class BeanD extends BeanC {
    
    int counter=0;
    
    /**
     * Getter for property counter.
     * @return Value of property counter.
     */
    public int getCounter() {
        return counter;
    }
    
    /**
     * Setter for property counter.
     * @param counter New value of property counter.
     */
    public void setCounter(int counter) {
        this.counter = counter;
        String[] s=new String[] {
            "sss",
            protectedProperty,
            "qqqqq",
            publicProperty
        };
    }
    
    public java.lang.String getProtectedProperty() {
        java.lang.String retValue;
        System.out.println("getProtectedProperty");
        retValue = super.getProtectedProperty();
        return (protectedProperty+retValue).substring(1);
    }
    
}

class BeanDD extends BeanB {
    long length;
    
    public BeanDD(String text) {
        super();
        Bean b=new BeanB();
    }
    
    /**
     * Getter for property length.
     * @return Value of property length.
     */
    public long getLength() {
        return length;
    }
    
    /**
     * Setter for property length.
     * @param length New value of property length.
     */
    public void setLength(long length) {
        this.length = length*Makable.CODE;
    }
    
    public void make(int a, String s, Bean b) {
        refID=a;
    }
    
    public Bean abc() {
        return this;
    }
}
Modified file:
-------------------------------------
/*
 * BeansD.java
 *
 * Created on May 20, 2004, 2:19 PM
 */

package org.netbeans.tests.examples.packb;

import org.netbeans.tests.examples.packa.Bean;
import org.netbeans.tests.examples.packa.Testable;
import org.netbeans.tests.examples.packc.Makable;

/**
 *
 * @author  eh103527
 */
public class BeansD implements org.netbeans.tests.examples.packc.Makable {
    
    static {
        new BeansD(new BeanD());
    }
    
    BeanA bb;
    
    Bean[] beans;
    
    /** Creates a new instance of BeansD */
    public BeansD() {
        bb=new BeanDA("text");
    }
    
    public BeansD(BeanA bb) {
        this.bb=bb;
        
    }
    
    public static class BeanDA extends BeanA {
        int number=CODE;
        
        public BeanDA(java.lang.String text) {
            super();
            this.abc().abc().abc();
            BeanA copy=new BeanA();
            setProtectedProperty(copy.getProtectedProperty()+copy.getProtectedProperty()+copy.getProtectedProperty());
            setProtectedProperty(copy.getProtectedProperty() + copy.getProtectedProperty());
            publicProperty=getProtectedProperty();
        }
        
        /**
         * Getter for property number.
         * @return Value of property number.
         */
        public int getNumber() {
            return number;
        }
        
        /**
         * Setter for property number.
         * @param number New value of property number.
         */
        public void setNumber(int number) {
            this.number = number*BeanB.CODE;
            System.out.println(getProtectedProperty());
        }
        
        public Bean abc() {
            return this;
        }
    }
    
    public class BeanDC extends BeanC {
        
        public String getProtectedProperty() {
            return super.getProtectedProperty()+"aaa";
        }
        
        public void make(int index, java.lang.String s, Bean bean) {
            System.out.println("testinner "+getProtectedProperty()+publicProperty);
        }
        
        public Bean abc() {
            System.out.println("abc");
            setProtectedProperty("abc");
            publicProperty="def";
            return super.abc();
        }
    }
    
    protected Bean[] getBeans() {
        return beans;
    }
    
    public void setBeans(Bean[] bss) {
        beans=bss;
    }
    
    public Object[] finish() {
        System.out.println("text "+bb.getProtectedProperty()+" "+((Bean)bb).abc());
        
        return null;
    }
    
    public void prepare(Object[] data) {
        ((Testable)bb).test();
        ((BeanD)bb).getProtectedProperty();
    }
    
    public org.netbeans.tests.examples.packc.Makable prepare() {
        ((Makable)new BeanDD("ttt")).make(10, "", bb);
        System.out.println("message");
        System.out.println();
        return new BeanDD("ttt");
    }
    
    public void make(int index, java.lang.String s, Bean bean) {
        System.out.println("test1");
    }
    
}


class BeanD extends BeanC {
    
    int counter=0;
    
    /**
     * Getter for property counter.
     * @return Value of property counter.
     */
    public int getCounter() {
        return counter;
    }
    
    /**
     * Setter for property counter.
     * @param counter New value of property counter.
     */
    public void setCounter(int counter) {
        this.counter = counter;
        String[] s=new String[] {
            "sss",
getProtectedProperty(),             "qqqqq",
            publicProperty
        };
    }
    
    public java.lang.String getProtectedProperty() {
        java.lang.String retValue;
        System.out.println("getProtectedProperty");
        retValue = super.getProtectedProperty();
        return (getProtectedProperty()+retValue).substring(1);
    }
    
}

class BeanDD extends BeanB {
    long length;
    
    public BeanDD(String text) {
        super();
        Bean b=new BeanB();
    }
    
    /**
     * Getter for property length.
     * @return Value of property length.
     */
    public long getLength() {
        return length;
    }
    
    /**
     * Setter for property length.
     * @param length New value of property length.
     */
    public void setLength(long length) {
        this.length = length*Makable.CODE;
    }
    
    public void make(int a, String s, Bean b) {
        refID=a;
    }
    
    public Bean abc() {
        return this;
    }
}

